% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/geom-disp.R
\name{geom_disp}
\alias{geom_disp}
\title{Title}
\usage{
geom_disp(mapping = NULL, data = NULL, position = "identity",
  na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, ...)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link{aes}} or
\code{\link{aes_}}. If specified and \code{inherit.aes = TRUE} (the
default), is combined with the default mapping at the top level of the
plot. You only need to supply \code{mapping} if there isn't a mapping
defined for the plot.}

\item{data}{A data frame. If specified, overrides the default data frame
defined at the top level of the plot.}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{na.rm}{If \code{FALSE} (the default), removes missing values with
a warning.  If \code{TRUE} silently removes missing values.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link{borders}}.}

\item{...}{}

\item{formula}{The modelling formula passed to \code{lm}. Should only
involve \code{y} and \code{x}}

\item{n}{Number of points used for interpolation.}
}
\description{
Title
}
\examples{
data("SPPdispersion")
SPPdispersion$wavelength<-SPPdispersion$wavelength*1e9

q<-ggplot(SPPdispersion, aes(x=wavelength, y=angle,fill=reflection)) +
  geom_disp()

print(q)

kx<-function(x,y) (2*pi/(x*1e-9))*sin(y*pi/180)
omega<-function(x,y) 2*pi*3e8/(x*1e-9)

q<-ggplot(SPPdispersion, aes(x=wavelength, y=angle,fill=reflection)) +
  geom_disp(fx=kx,fy=omega,nx=200,ny=200)

print(q)
fx <- function(x,y) x*sin(y*pi/180)
fy <- function(x,y) x*cos(y*pi/180)

q<-ggplot(SPPdispersion, aes(x=wavelength, y=angle,fill=reflection)) +
  geom_disp(fx=fx,fy=fy)+coord_equal()
print(q)
}

